// Breakpoints - min-width
// # DO NOT REMOVE - Edit but DO NOT REMOVE
$breakpoints: (
  sm: 768px,
  md: 1024px,
  lg: 1300px,
  xl: 1500px
);

// Comment out any maps below this line to prevent css vars or Utility Classes being created from them.
//===============================================================================================

// Colours
// # Generates matching CSS Custom Vars in: _css-vars.
$colours: (
    'vars': (
        0: ( 'white': #ffffff ),
        1: ( 'black': #252525 ),
        2: ( 'dark-grey': #212322 ),
        3: ( 'mid-grey': #54585a ),
        4: ( 'light-grey': #97999b ),
        5: ( 'bg-grey': #f3f3f3 )
    ),
    'classes': ()
);

// Effects - Box Shadow
// # Generates matching Utility Classes in: effects/_box-shadow.scss
// # Generates matching CSS Custom Vars in: _css-vars.
$box_shadows: (
//  int:( value,                                                                        class,  classExt    var,    varExt ),
    0:  ( '0 0 0 1px rgba(0, 0, 0, 0.05)',                                              true,   'xs',       true,   'shadow-xs' ),
    1:  ( '0 1px 2px 0 rgba(0, 0, 0, 0.05)',                                            true,   'sm',       true,   'shadow-sm' ),
    2:  ( '0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)',            true,   'base',     true,   'shadow-base' ),
    3:  ( '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',      true,   'md',       true,   'shadow-md' ),
    4:  ( '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',    true,   'lg',       true,   'shadow-lg' ),
    5:  ( '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)',  true,   'xl',       true,   'shadow-xl' ),
    6:  ( '0 25px 50px -12px rgba(0, 0, 0, 0.25)',                                      true,   '2xl',      true,   'shadow-2xl' ),
    7:  ( 'inset 0 2px 4px 0 rgba(0, 0, 0, 0.06)',                                      true,   'inner',    true,   'shadow-inner' ),
    8:  ( '0 0 0 3px rgba(66, 153, 225, 0.5)',                                          true,   'outline',  true,   'shadow-outline' ),
    9:  ( 'none',                                                                       true,   'none',     true,   'shadow-none' )
);

// Effects - Opacity
// # Generates matching Utility Classes in: effects/_opacity.scss
$opacities: ();
@for $i from 0 through 20 {
    $value: ( $i * 5 ) / 100;
    $unit: $i * 5;

    $opacities: map-merge(
        $opacities, (
        //  int:( value,    class,  classExt    var,    varExt ),
            $i: ( $value,   true,   $unit,      false,  'opacity-#{$unit}' )
        )
    );
}

// Interactivity - Appearance
// # Generates matching Utility Classes in: interactivity/_appearance.scss
$appearances: (
//  int:( value,    class,  classExt    var,    varExt ),
    0:  ( 'none',   true,   'none',     false,  'apperance-none' )
);

// Interactivity - Cursors
// # Generates matching Utility Classes in: interactivity/_cursor.scss
$cursors: (
//  int:( value,        class,  classExt        var,    varExt ),
    0:  ( 'auto',       true,   'auto',         false,  'cursor-auto' ),
    1:  ( 'default',    true,   'default',      false,  'cursor-default' ),
    2:  ( 'pointer',    true,   'pointer',      false,  'cursor-pointer' ),
    3:  ( 'wait',       true,   'wait',         false,  'cursor-wait' ),
    4:  ( 'text',       true,   'text',         false,  'cursor-text' ),
    5:  ( 'move',       true,   'move',         false,  'cursor-move' ),
    6:  ( 'not-allowed',true,   'not-allowed',  false,  'cursor-not-allowed' )
);

// Interactivity - Outline
// # Generates matching Utility Classes in: interactivity/_outline.scss
$outlines: (
//  int:( value,class,  classExt    var,    varExt ),
    0:  ( 0,    true,   'none',     false,  'outline-none' )
);

// Interactivity - Pointer Events
// # Generates matching Utility Classes in: interactivity/_pointer-events.scss
$pointer_events: (
//  int:( value,    class,  classExt    var,    varExt ),
    0:  ( 'none',   true,   'none',     false,  'pointer-none' ),
    1:  ( 'auto',   true,   'auto',     false,  'pointer-auto' )
);

// Interactivity - Resize
// # Generates matching Utility Classes in: interactivity/_resize.scss
$resizes: (
//  int:( value,        class,  classExt    var,    varExt ),
    0:  ( 'both',       true,   'default',  false,  '' ),
    1:  ( 'none',       true,   'none',     false,  'resize-none' ),
    2:  ( 'vertical',   true,   'y',        false,  'resize-y' ),
    3:  ( 'horizontal', true,   'x',        false,  'resize-x' )
);

// Interactivity - User Select
// # Generates matching Utility Classes in: interactivity/_user-select.scss
$user_selects: (
//  int:( value,        class,  classExt    var,    varExt ),
    0:  ( 'none',       true,   'none',     false,  'u-select-none' ),
    1:  ( 'text',       true,   'text',     false,  'u-select-text' ),
    2:  (' all',        true,   'all',      false,  'u-select-all' ),
    3:  ( 'auto',       true,   'auto',     false,  'u-select-auto' )
);

// Sizing - width
// # Generates matching Utility Classes in: sizing/_width.scss
$widths: (
//  int:( value,        class,  classExt        var,    varExt ),
    0:  ( auto,         true,   'auto',         true,   'w-auto' ),
    2:  ( 0,            true,   '0',            true,   'w-0' ),
    3:  ( 25%,          true,   'quarter',      true,   'w-25' ),
    4:  ( 50%,          true,   'half',         true,   'w-50' ),
    5:  ( 75%,          true,   '3-quarter',    true,   'w-75' ),
    6:  ( 100%,         true,   'full',         true,   'w-100' ),
    7:  ( 100vw,        true,   'screen',       true,   'w-screen' ),
    8:  ( 33.333333%,   false,  '1\\/3',        true,   'w-1-third' ),
    9:  ( 66.666667%,   false,  '2\\/3',        true,   'w-2-thirds' ),
    10: ( 20%,          false,  '1\\/5',        true,   'w-1-fifth' ),
    11: ( 40%,          false,  '2\\/5',        true,   'w-2-fifths' ),
    12: ( 60%,          false,  '3\\/5',        true,   'w-3-fifths' ),
    13: ( 80%,          false,  '4\\/5',        true,   'w-4-fifths' ),
    14: ( 16.666667%,   false,  '1\\/6',        true,   'w-1-sixth' ),
    15: ( 33.333333%,   false,  '2\\/6',        true,   'w-2-sixths' ),
    16: ( 50%,          false,  '3\\/6',        true,   'w-3-sixths' ),
    17: ( 66.666667%,   false,  '4\\/6',        true,   'w-4-sixths' ),
    18: ( 83.333333%,   false,  '5\\/6',        true,   'w-5-sixths' ),
    19: ( 8.333333%,    false,  '1\\/12',       true,   'w-1-twelfth' ),
    20: ( 16.666667%,   false,  '2\\/12',       true,   'w-2-twelfths' ),
    21: ( 25%,          false,  '3\\/12',       true,   'w-3-twelfths' ),
    22: ( 33.333333%,   false,  '4\\/12',       true,   'w-4-twelfths' ),
    23: ( 41.666667%,   false,  '5\\/12',       true,   'w-5-twelfths' ),
    24: ( 50%,          false,  '6\\/12',       true,   'w-6-twelfths' ),
    25: ( 58.333333%,   false,  '7\\/12',       true,   'w-7-twelfths' ),
    26: ( 66.666667%,   false,  '8\\/12',       true,   'w-8-twelfths' ),
    27: ( 75%,          false,  '9\\/12',       true,   'w-9-twelfths' ),
    28: ( 83.333333%,   false,  '10\\/12',      true,   'w-10-twelfths' ),
    29: ( 91.666667%,   false,  '11\\/12',      true,   'w-11-twelfths' )
);

// Sizing - Height
// # Generates matching Utility Classes in: sizing/_height.scss
$heights: (
//  int:( value,        class,  classExt        var,    varExt ),
    0:  ( auto,         true,   'auto',         true,   'h-auto' ),
    2:  ( 0,            true,   '0',            true,   'h-0' ),
    3:  ( 25%,          true,   'quarter',      true,   'h-25' ),
    4:  ( 50%,          true,   'half',         true,   'h-50' ),
    5:  ( 75%,          true,   '3-quarter',    true,   'h-75' ),
    6:  ( 100%,         true,   'full',         true,   'h-100' ),
    7:  ( 100vw,        true,   'screen',       true,   'h-screen' )
);

// Spacing - Spacing Units
// # Generates matching CSS Custom Vars in: _css-vars.
// # Generates Margin Utility Classes using these vars in: spacing/_padding.scss
// # Generates Padding Utility Classes using these vars in: spacing/_margin.scss
$spacing_properties: (
    'vars': (
        0: ( 'spacing-0': 0 ),
        1: ( 'spacing-1': 5px ),
        2: ( 'spacing-2': 10px )
    ),
    'classes': ()
);

// Spacing - Margin
// # Generates matching Utility Classes in: spacing/_margin.scss
// # Creates the 'classes' map from the '$spacing_properties' map.
$margin_properties: ( 'vars': (), 'classes': () );
@include spacing-map-constructor( $spacing_properties, 'm', 'margin' );

// Spacing - Padding
// # Generates matching Utility Classes in: spacing/_padding.scss
// # Creates the 'classes' map from the '$spacing_properties' map.
$padding_properties: ( 'vars': (), 'classes': () );
@include spacing-map-constructor( $spacing_properties, 'p', 'padding' );

// SVG - Fill
// # Generates matching Utility Classes in: svg/_fill.scss
$fills: (
//  i: ( value,        class,   classExt        var,    varExt ),
    0: ( currentColor, true,    'current',      false,  'fill-current' )
);
// TODO: Fix Fills Loop
// @each $name, $details in $colours {
//     $f: 0;
//     $fills: map-merge(
//         $fills, (
//         //  int:( value,      class,   classExt       var,     varExt ),
//             $name: ( #{nth($details, 1)}, false, #{nth($details, 3)} )
//         )
//     );
//     $f: $f+1;
// }

// SVG - Stroke
// # Generates matching Utility Classes in: svg/_stroke.scss
$strokes: (
//  i: ( value,        class,   classExt        var,    varExt ),
    0: ( currentColor, true,    'current',      false,  'stroke-current' )
);
// TODO: Fix Strokes Loop
// @each $name, $details in $colours {
//     $strokes: map-merge( $strokes, ( $name: ( #{nth($details, 1)}, false, #{nth($details, 3)} ) ) );
// }

// SVG - Stroke Width
// # Generates matching Utility Classes in: svg/_stroke-width.scss
$stroke_widths: ();
@for $i from 0 through 5 {
    $stroke_widths: map-merge(
        $stroke_widths, (
        //  int:( value,    class,  classExt    var,    varExt ),
            $i: ( $i,       true,   $i,          false,  'stroke-w-#{$i}' )
        )
    );
}

// Typography - Fluid Text Defaults
// # Generates matching CSS Custom Vars in: _css-vars.
$fluid_typography: (
//  i: ( value, class,  classExt            var,    varExt ),
    0: ( 320,   false,  'fluid-min-width',  true,   'fluid-min-width' ),
    1: ( 1500,  false,  'fluid-max-width',  true,   'fluid-max-width' ),
    2: ( 16,    false,  'fluid-min-size',   true,   'fluid-min-size' ),
    3: ( 19,    false,  'fluid-max-size',   true,   'fluid-max-size' ),
    4: ( 1.125, false,  'fluid-min-ratio',  true,   'fluid-min-ratio' ),
    5: ( 1.2,   false,  'fluid-max-ratio',  true,   'fluid-max-ratio' )
);

// Typography - Font Family
// # Generates matching Utility Classes in: typography/_font-family.scss
// # Generates matching CSS Custom Vars in: _css-vars.
$font_families: (
//  i: ( value,                                                         class,  classExt    var,    varExt ),
    0: ( 'Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif',    true,   'sans',     true,   'ff-sans' ),
    1: ( 'Georgia, Cambria, "Times New Roman", Times, serif',           true,   'serif',    true,   'ff-serif' )
);

// Typography - Font Size
// # Generates matching Utility Classes in: typography/_font-size.scss
// # Generates matching CSS Custom Vars in: _css-vars.
$font_sizes: (
//  i: ( value,                                                                                                                 class,  classExt    var,    varExt ),
    0: ( calc(((var(--fluid-min-size-0) * 1rem) + (var(--fluid-max-size-0) - var(--fluid-min-size-0)) * var(--fluid-bp))),      false,  'default',  false,  '' ),
    1: ( calc(((var(--fluid-min-size--1) * 1rem) + (var(--fluid-max-size--1) - var(--fluid-min-size--1)) * var(--fluid-bp))),   true,   'sm',       true,   'fs-sm' ),
    2: ( calc(((var(--fluid-min-size-0) * 1rem) + (var(--fluid-max-size-0) - var(--fluid-min-size-0)) * var(--fluid-bp))),      true,   'base',     true,   'fs-base' ),
    3: ( calc(((var(--fluid-min-size-1) * 1rem) + (var(--fluid-max-size-1) - var(--fluid-min-size-1)) * var(--fluid-bp))),      true,   'md',       true,   'fs-md' ),
    4: ( calc(((var(--fluid-min-size-2) * 1rem) + (var(--fluid-max-size-2) - var(--fluid-min-size-2)) * var(--fluid-bp))),      true,   'lg',       true,   'fs-lg' ),
    5: ( calc(((var(--fluid-min-size-3) * 1rem) + (var(--fluid-max-size-3) - var(--fluid-min-size-3)) * var(--fluid-bp))),      true,   'xl',       true,   'fs-xl' ),
    6: ( calc(((var(--fluid-min-size-4) * 1rem) + (var(--fluid-max-size-4) - var(--fluid-min-size-4)) * var(--fluid-bp))),      true,   '2xl',      true,   'fs-2xl' ),
    7: ( calc(((var(--fluid-min-size-5) * 1rem) + (var(--fluid-max-size-5) - var(--fluid-min-size-5)) * var(--fluid-bp))),      true,   '3xl',      true,   'fs-3xl' )
);

// Typography - Font Style
// # Generates matching Utility Classes in: typography/_font-style.scss
$font_styles: (
//  i: ( value,    class,   classExt    var,    varExt ),
    0: ( 'normal', true,    'default',  false,  ''),
    1: ( 'italic', true,    'italic',   false,  'font-style-italic' ),
    2: ( 'normal', true,    'normal',   false,  'font-style-normal' )
);

// Typography - Font Weights
// # Generates matching Utility Classes in: typography/_font-weight.scss
// # Generates matching CSS Custom Vars in: _css-vars.
$font_weights: (
//  i: ( value, class,  classExt    var,    varExt ),
    0: ( 400,   true,   'default',  false,  '' ),
    1: ( 200,   true,   'light',    true,   'fw-light' ),
    2: ( 400,   true,   'normal',   true,   'fw-normal' ),
    3: ( 600,   true,   'bold',     true,   'fw-bold' )
);

// Typography - Tracking / Letter Spacings
// # Generates matching Utility Classes in: typography/_letter-spacing.scss
// # Generates matching CSS Custom Vars in: _css-vars.
$letter_spacings: (
//  int:( value,    class,  classExt    var,    varExt ),
    0: ( 1.5,       true,   'default',  false,  '' ),
    1: ( -0.1em,    true,   'tightest', true,   'tracking-tightest' ),
    2: ( -0.05em,   true,   'tighter',  true,   'tracking-tighter' ),
    3: ( -0.025em,  true,   'tight',    true,   'tracking-tight' ),
    4: ( 0,         true,   'normal',   true,   'tracking-normal' ),
    5: ( 0.025em,   true,   'wide',     true,   'tracking-wide' ),
    6: ( 0.05em,    true,   'wider',    true,   'tracking-wider' ),
    7: ( 0.1em,     true,   'widest',   true,   'tracking-widest' )
);

// Typography - Leading / Line Height
// # Generates matching Utility Classes in: typography/_line-height.scss
// # Generates matching CSS Custom Vars in: _css-vars.
$line_heights: (
//  int:( value,    class,  classExt    var,    varExt ),
    0:  ( 1.5,      true,   'default',  false,  ''),
    1:  ( 1,        true,   'none',     true,   'leading-none' ),
    2:  ( 1.25,     true,   'tight',    true,   'leading-tight' ),
    3:  ( 1.375,    true,   'snug',     true,   'leading-snug' ),
    4:  ( 1.5,      true,   'normal',   true,   'leading-normal' ),
    5:  ( 1.625,    true,   'relaxed',  true,   'leading-relaxed' ),
    6:  ( 2,        true,   'loose',    true,   'leading-loose' )
);

// Typography - Text Align
// # Generates matching Utility Classes in: typography/_text-align.scss
$text_alignments: (
//  int:( value,    class,  classExt    var,    varExt ),
    0: ( 'left',    true,   'default',  false,  '' ),
    1: ( 'left',    true,   'left',     false,  'text-left' ),
    2: ( 'center',  true,   'center',   false,  'text-center' ),
    3: ( 'right',   true,   'right',    false,  'text-right' ),
    4: ( 'justify'  true,   'justify',  false,  'text-justify' )
);

// Typography - Text Decoration
// # Generates matching Utility Classes in: typography/_text-decoration.scss
$text_decorations: (
//  int:( value,            class,  classExt    var,    varExt ),
    0: ( 'none',            true,   'default',  false,  '' ),
    1: ( 'underline',       true,   'under',    false,  'text-under' ),
    2: ( 'line-through',    true,   'strike',   false,  'text-strike' ),
    3: ( 'none',            true,   'none',     false,  'text-none' )
);
