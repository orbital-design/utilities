{"version":3,"sources":["helpers/_css-vars.scss","helpers/_constructor-vars.scss","helpers/_mixins.scss","helpers/_constructor-utilities.scss","helpers/_functions.scss"],"names":[],"mappings":"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IASQ,cCdQ;IDcR,mBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,uBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,sBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,wBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,qBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,mBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,mBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,uBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,sBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,wBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,qBCdQ,EAAA,EDgBf;;ADlBb;ECOY;IASQ,cCdQ;IDcR,mBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,mBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,uBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,sBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,wBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,qBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,mBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,mBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,uBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,sBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,wBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,qBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,mBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,mBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,uBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,sBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,wBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,qBCdQ,EAAA,EDgBf;;ADlBb;ECOY;IASQ,cCdQ;IDcR,mBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,mBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,uBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,sBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,wBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,qBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,mBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,mBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,uBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,sBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,wBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,qBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,mBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,mBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,uBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,sBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,wBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,qBCdQ,EAAA,EDgBf;;ADlBb;ECOY;IASQ,cCdQ;IDcR,mBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,mBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,uBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,sBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,wBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,qBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,mBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,mBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,uBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,sBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,wBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,qBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,mBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,mBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,uBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,sBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,wBCdQ,EAAA;EDKhB;IASQ,cCdQ;IDcR,qBCdQ,EAAA,EDgBf","file":"base.css","sourcesContent":[":root {\n    // Typography - Fluid Text Defaults\n    @include css-var-constructor( $fluid_typography );\n\n    --fluid-screen: 100vw;\n    --fluid-bp: calc((var(--fluid-screen) - ((var(--fluid-min-width) / 16) * 1rem)) / ((var(--fluid-max-width) / 16) - (var(--fluid-min-width) / 16)));\n}\n\n@include mq(xl) {\n    :root {\n        --fluid-screen: calc(var(--fluid-max-width) * 1px);\n    }\n}\n\n:root {\n    // Fluid Text Helpers\n    --fluid-max-negative: (1 / var(--fluid-max-ratio) / var(--fluid-max-ratio));\n    --fluid-min-negative: (1 / var(--fluid-min-ratio) / var(--fluid-min-ratio));\n    --fluid-min-scale--1: var(--fluid-min-ratio) * var(--fluid-min-negative);\n    --fluid-max-scale--1: var(--fluid-max-ratio) * var(--fluid-max-negative);\n    --fluid-min-size--1: (var(--fluid-min-size) * var(--fluid-min-scale--1)) / 16;\n    --fluid-max-size--1: (var(--fluid-max-size) * var(--fluid-max-scale--1)) / 16;\n    --fluid-min-scale-0: var(--fluid-min-ratio);\n    --fluid-max-scale-0: var(--fluid-max-ratio);\n    --fluid-min-size-0: (var(--fluid-min-size)) / 16;\n    --fluid-max-size-0: (var(--fluid-max-size)) / 16;\n    --fluid-min-scale-1: var(--fluid-min-scale-0) * var(--fluid-min-ratio);\n    --fluid-max-scale-1: var(--fluid-max-scale-0) * var(--fluid-max-ratio);\n    --fluid-min-size-1: (var(--fluid-min-size) * var(--fluid-min-scale-0)) / 16;\n    --fluid-max-size-1: (var(--fluid-max-size) * var(--fluid-max-scale-0)) / 16;\n    --fluid-min-scale-2: var(--fluid-min-scale-1) * var(--fluid-min-ratio);\n    --fluid-max-scale-2: var(--fluid-max-scale-1) * var(--fluid-max-ratio);\n    --fluid-min-size-2: (var(--fluid-min-size) * var(--fluid-min-scale-1)) / 16;\n    --fluid-max-size-2: (var(--fluid-max-size) * var(--fluid-max-scale-1)) / 16;\n    --fluid-min-scale-3: var(--fluid-min-scale-2) * var(--fluid-min-ratio);\n    --fluid-max-scale-3: var(--fluid-max-scale-2) * var(--fluid-max-ratio);\n    --fluid-min-size-3: (var(--fluid-min-size) * var(--fluid-min-scale-2)) / 16;\n    --fluid-max-size-3: (var(--fluid-max-size) * var(--fluid-max-scale-2)) / 16;\n    --fluid-min-scale-4: var(--fluid-min-scale-3) * var(--fluid-min-ratio);\n    --fluid-max-scale-4: var(--fluid-max-scale-3) * var(--fluid-max-ratio);\n    --fluid-min-size-4: (var(--fluid-min-size) * var(--fluid-min-scale-3)) / 16;\n    --fluid-max-size-4: (var(--fluid-max-size) * var(--fluid-max-scale-3)) / 16;\n    --fluid-min-scale-5: var(--fluid-min-scale-4) * var(--fluid-min-ratio);\n    --fluid-max-scale-5: var(--fluid-max-scale-4) * var(--fluid-max-ratio);\n    --fluid-min-size-5: (var(--fluid-min-size) * var(--fluid-min-scale-4)) / 16;\n    --fluid-max-size-5: (var(--fluid-max-size) * var(--fluid-max-scale-4)) / 16;\n\n    // Typography - Font Family\n    // # Generates matching Utility Classes in: typography/_font-family.scss\n    @include css-var-constructor( $font_family_properties );\n\n    // Typography - Font Size\n    // # Generates matching Utility Classes in: typography/_font-size.scss\n    @include css-var-constructor( $font_size_properties );\n\n    // Typography - Font Style\n    // # Generates matching Utility Classes in: typography/_font-style.scss\n    @include css-var-constructor( $font_style_properties );\n\n    // Typography - Font Weights\n    // # Generates matching Utility Classes in: typography/_font-weight.scss\n    @include css-var-constructor( $font_weight_properties );\n\n    // Typography - Tracking / Letter Spacings\n    // # Generates matching Utility Classes in: typography/_letter-spacing.scss\n    @include css-var-constructor( $tracking_properties );\n\n    // Typography - Leading / Line Height\n    // # Generates matching Utility Classes in: typography/_line-height.scss\n    @include css-var-constructor( $leading_properties );\n\n    // Typography - Text Align\n    // # Generates matching Utility Classes in: typography/_text-align.scss\n    @include css-var-constructor( $text_align_properties );\n\n    // Typography - Text Colour\n    // # Generates matching Utility Classes in: typography/_text-colour.scss\n    @include css-var-constructor( $text_color_properties );\n\n    // Typography - Text Decoration\n    // # Generates matching Utility Classes in: typography/_text-decoration.scss\n    @include css-var-constructor( $text_decoration_properties );\n\n    // Generate Color Properties\n    // # Create matchng utilities for these in: typography/_text-colour.scss\n    @include css-var-constructor( $colours );\n\n    // Effects - Box Shadow\n    // # Generates matching Utility Classes in: effects/_box-shadow.scss\n    @include css-var-constructor( $shadow_properties );\n\n    // Effects - Opacity\n    // # Generates matching Utility Classes in: effects/_opacity.scss\n    @include css-var-constructor( $opacity_properties );\n\n    // Interactivity - Appearance\n    // # Generates matching Utility Classes in: interactivity/_appearance.scss\n    @include css-var-constructor( $appearance_properties );\n\n    // Interactivity - Cursors\n    // # Generates matching Utility Classes in: interactivity/_cursor.scss\n    @include css-var-constructor( $cursor_properties );\n\n    // Interactivity - Outline\n    // # Generates matching Utility Classes in: interactivity/_outline.scss\n    @include css-var-constructor( $outline_properties );\n\n    // Interactivity - Pointer Events\n    // # Generates matching Utility Classes in: interactivity/_pointer-events.scss\n    @include css-var-constructor( $pointer_event_properties );\n\n    // Interactivity - Resize\n    // # Generates matching Utility Classes in: interactivity/_resize.scss\n    @include css-var-constructor( $resize_properties );\n\n    // Interactivity - User Select\n    // # Generates matching Utility Classes in: interactivity/_user-select.scss\n    @include css-var-constructor( $user_select_properties );\n\n    // Sizing - Height\n    // # Generates matching Utility Classes in: sizing/_height.scss\n    // # Generates matching Utility Classes in: sizing/_min-height.scss\n    // # Generates matching Utility Classes in: sizing/_max-height.scss\n    @include css-var-constructor( $height_properties );\n\n    // Sizing - Width\n    // # Generates matching Utility Classes in: sizing/_width.scss\n    // # Generates matching Utility Classes in: sizing/_min-width.scss\n    // # Generates matching Utility Classes in: sizing/_max-width.scss\n    @include css-var-constructor( $width_properties );\n\n    // Spacing - Padding\n    // # Generates matching Utility Classes in: sizing/_height.scss\n    // # Generates matching Utility Classes in: sizing/_min-height.scss\n    // # Generates matching Utility Classes in: sizing/_max-height.scss\n    @include css-var-constructor( $spacing_properties );\n\n    // SVG - Fills\n    // # Generates matching Utility Classes in: svg/_fill.scss\n    @include css-var-constructor( $fill_color_properties );\n\n    // SVG - Stroke\n    // # Generates matching Utility Classes in: svg/_stroke.scss\n    @include css-var-constructor( $stroke_color_properties );\n\n    // SVG - Stroke Width\n    // # Generates matching Utility Classes in: svg/_stroke-width.scss\n    @include css-var-constructor( $stroke_width_properties );\n}\n","// CSS Custom Var/Prop Constructor\n// # Used in: _css-vars.scss\n@mixin css-var-constructor( $map ) {\n\n    // # Check if $map has been specified\n    @if $map != null {\n\n        // ## If is specified, loop through each item in the map.\n        @each $map_type, $map_type_values in $map {\n\n            // ### Check whether item should output a CSS Var.\n            @if $map_type == 'vars' {\n\n                // ## If CSS Var should be output, loop through each item in the map.\n                @each $var_name, $var_value in $map_type_values {\n                    --#{$var_name}: #{$var_value};\n                }\n            }\n        }\n    }\n}","// Mixin for creating media Queries\n// # https://www.sitepoint.com/using-sass-maps/\n@mixin mq($breakpoint) {\n  @if map-has-key($breakpoints, $breakpoint) {\n    @media (min-width: #{map-get($breakpoints, $breakpoint)}) {\n      @content;\n    }\n  }\n\n  @else {\n    @warn \"Unfortunately, no value could be retrieved from `#{$breakpoint}`. \"\n        + \"Please make sure it is defined in `$breakpoints` map.\";\n  }\n}","// Utility Class Constructor\n@mixin constructor( $class_prefix, $class_suffix ) {\n    // Loop through first level of map\n    @each $map_type, $map_type_values in $class_map {\n        // # Check whether item should output a var.\n        @if $map_type == 'classes' {\n\n            // If type is 'classes', progress with loop of indexes.\n            @each $class_name, $class_props in $map_type_values {\n                // @warn $index;\n                // Loop through classes inside index.\n                .#{$class_prefix}#{$class_name}#{$class_suffix} {\n\n                @each $property_type, $property_value in $class_props {\n                    // @warn $class_name;\n                    // @warn $css_value;\n                    // @warn $classes;\n                    // Create class.\n\n                        // Output each attribute line inside class.\n                        #{$property_type}: $property_value;\n                    }\n                }\n            }\n\n        }\n    }\n\n    // # Check if $map has been specified\n    // @if $class_map != null {\n\n    //     // ## If $map is specified, loop through each item.\n    //     @each $name, $properties in $class_map {\n\n    //         // ### Check if item should output a class.\n    //         @if nth( $properties, 2 ) == true {\n\n    //             // #### Check if item should output a CSS Var.\n    //             @if nth( $properties, 4 ) == true {\n\n    //                 // ##### Check if class should be a default.\n    //                 @if nth( $properties, 3 ) == 'default' {\n\n    //                     // ###### Construct class with no --{value}\n    //                     .#{$prefix}#{$suffix} {\n    //                         #{$class_property}: v(#{nth($properties, 5)});\n    //                     }\n    //                 } @else {\n\n    //                     // ###### Construct class with --{value} with property from map.\n    //                     .#{$prefix}--#{nth($properties, 3)}#{$suffix} {\n    //                         #{$class_property}: v(#{nth($properties, 5)});\n    //                     }\n    //                 }\n    //             } @else {\n\n    //                 // ##### Check if class should be a default.\n    //                 @if nth( $properties, 3 ) == 'default' {\n\n    //                     // ###### Construct class with no --{value}\n    //                     .#{$prefix}#{$suffix} {\n    //                         #{$class_property}: #{nth($properties, 1)};\n    //                     }\n    //                 } @else {\n    //                     // ###### Construct class with --{value} with property from map.\n    //                     .#{$prefix}--#{nth($properties, 3)}#{$suffix} {\n    //                         #{$class_property}: #{nth($properties, 1)};\n    //                     }\n    //                 }\n    //             }\n    //         }\n    //     }\n    // }\n}\n\n// # Let's put it altogether\n@mixin class-constructor( $class_map, $class_variants ){\n\n    // ## Use constructor to build your default classes without media queries & variants.\n    @include constructor('', '');\n\n    // ## Check if our $variants list includes 'none'.\n    @if not index($class_variants, 'none') {\n\n        // ### If 'none' isn't present we'll loop through the selected variants for this class.\n        @each $variant in $class_variants {\n\n            // #### We want to make sure we don't use the 'responsive' variant at this point if it exists.\n            @if $variant != 'responsive' {\n\n                // ##### Use constructor to build our variant classes without media queries.\n                @include constructor('#{$variant}\\\\:', ':#{$variant}');\n            }\n        }\n    }\n\n    // ## Check if our $variants list includes 'responsive'.\n    @if index($class_variants, 'responsive') {\n\n        // ### If 'responsive' is present we'll loop through the brakpoints set in _scss-vars.scss.\n        @each $bp_name, $breakpoint in $breakpoints {\n\n            // #### Construct each media query when we loop through it.\n            @include mq( $bp_name ) {\n            // @media (min-width: $breakpoint) {\n\n                // ##### Use constructor to build our default classes with breakpoint prefix.\n                @include constructor('#{$bp_name}\\\\:', '');\n\n                // ##### We'll loop through the selected variants for this class.\n                @each $variant in $class_variants {\n\n                    // ###### We want to make sure we don't use the 'responsive' variant at this pointas we've already used it.\n                    @if $variant != 'responsive' {\n\n                        // ####### Use constructor to build our variant classes with breakpoint prefix.\n                        @include constructor('#{$bp_name}\\\\:#{$variant}\\\\:', ':#{$variant}');\n                    }\n                }\n            }\n        }\n    }\n}\n","// fn for easily creating css vars\n// # https://dev.to/meduzen/write-css-variables-faster-in-scss-1mon\n@function v($var, $fallback: null) {\n    @if($fallback) {\n        @return var(--#{$var}, #{$fallback});\n    } @else {\n        @return var(--#{$var});\n    }\n}\n\n@function map-deep-set($map, $keys.../*, $value */) {\n  $map-list: ($map,);\n  $result: null;\n\n  @if length($keys) == 2 {\n    @return map-merge($map, (nth($keys, 1): nth($keys, -1)));\n  }\n\n  @for $i from 1 through length($keys) - 2 {\n    $map-list: append($map-list, map-get(nth($map-list, -1), nth($keys, $i)));\n  }\n\n  @for $i from length($map-list) through 1 {\n    $result: map-merge(nth($map-list, $i), (nth($keys, $i): if($i == length($map-list), nth($keys, -1), $result)));\n  }\n\n  @return $result;\n}\n\n@function map-deep-get($map, $keys...) {\n    @each $key in $keys {\n        $map: map-get($map, $key);\n    }\n    @return $map;\n}\n\n@function rem-calc($size) {\n    $remSize: $size / 16px;\n    @return #{$remSize}rem;\n}"]}