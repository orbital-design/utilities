{"version":3,"sources":["_css-vars.scss","_functions.scss","typography/_text-align.scss"],"names":[],"mappings":"AAAA;EAEI,sBAAkB;EAClB,uBAAkB;EAClB,oBAAiB;EACjB,oBAAiB;EACjB,wBAAkB;EAClB,sBAAkB;EAElB,qBAAe;EACf,kJAAW,EAAA;;ACIX;EDAA;IACI,kDAAe,EAAA,EAClB;;AAGL;EAEI,2EAAqB;EACrB,2EAAqB;EACrB,wEAAqB;EACrB,wEAAqB;EACrB,6EAAoB;EACpB,6EAAoB;EACpB,2CAAoB;EACpB,2CAAoB;EACpB,gDAAmB;EACnB,gDAAmB;EACnB,sEAAoB;EACpB,sEAAoB;EACpB,2EAAmB;EACnB,2EAAmB;EACnB,sEAAoB;EACpB,sEAAoB;EACpB,2EAAmB;EACnB,2EAAmB;EACnB,sEAAoB;EACpB,sEAAoB;EACpB,2EAAmB;EACnB,2EAAmB;EACnB,sEAAoB;EACpB,sEAAoB;EACpB,2EAAmB;EACnB,2EAAmB;EACnB,sEAAoB;EACpB,sEAAoB;EACpB,2EAAmB;EACnB,2EAAmB;EAKf,gBAAa;EAAb,gBAAa;EAAb,oBAAa;EAAb,mBAAa;EAAb,qBAAa;EAAb,kBAAa;EAMjB,4HAAQ;EACR,2HAAU;EACV,yHAAQ;EACR,yHAAQ;EACR,yHAAQ;EACR,0HAAS;EACT,0HAAS;EAGT,eAAW;EACX,gBAAY;EACZ,cAAU;EAGV,mEAAU;EACV,6DAAW;EAGX,eAAQ;EACR,gBAAQ;EACR,iBAAQ;EACR,SAAO;EACP,eAAO;EACP,cAAO;EACP,aAAO;EAGP,YAAU;EACV,gBAAW;EACX,gBAAU;EACV,gBAAY;EACZ,mBAAa;EACb,aAAW,EAAA;;AEhFX;EACI,gBAAgB,EAAA;;AAGpB;EACI,kBAAkB,EAAA;;AAGtB;EACI,iBAAiB,EAAA;;AAGrB;EACI,mBAAmB,EAAA;;AA4BnB;EAzCJ;IACI,gBAAgB,EAAA;EAGpB;IACI,kBAAkB,EAAA;EAGtB;IACI,iBAAiB,EAAA;EAGrB;IACI,mBAAmB,EAAA,EACtB;;AA2BG;EAzCJ;IACI,gBAAgB,EAAA;EAGpB;IACI,kBAAkB,EAAA;EAGtB;IACI,iBAAiB,EAAA;EAGrB;IACI,mBAAmB,EAAA,EACtB;;AA2BG;EAzCJ;IACI,gBAAgB,EAAA;EAGpB;IACI,kBAAkB,EAAA;EAGtB;IACI,iBAAiB,EAAA;EAGrB;IACI,mBAAmB,EAAA,EACtB;;AA2BG;EAzCJ;IACI,gBAAgB,EAAA;EAGpB;IACI,kBAAkB,EAAA;EAGtB;IACI,iBAAiB,EAAA;EAGrB;IACI,mBAAmB,EAAA,EACtB","file":"base.css","sourcesContent":[":root {\n    // Fluid Text Defaults\n    --fluid-min-width: 320;\n    --fluid-max-width: 1500;\n    --fluid-min-size: 16;\n    --fluid-max-size: 19;\n    --fluid-min-ratio: 1.125;\n    --fluid-max-ratio: 1.2;\n\n    --fluid-screen: 100vw;\n    --fluid-bp: calc((var(--fluid-screen) - ((var(--fluid-min-width) / 16) * 1rem)) / ((var(--fluid-max-width) / 16) - (var(--fluid-min-width) / 16)));\n}\n\n@include mq(xl) {\n    :root {\n        --fluid-screen: calc(var(--fluid-max-width) * 1px);\n    }\n}\n\n:root {\n    // Fluid Text Helpers\n    --fluid-max-negative: (1 / var(--fluid-max-ratio) / var(--fluid-max-ratio));\n    --fluid-min-negative: (1 / var(--fluid-min-ratio) / var(--fluid-min-ratio));\n    --fluid-min-scale--1: var(--fluid-min-ratio) * var(--fluid-min-negative);\n    --fluid-max-scale--1: var(--fluid-max-ratio) * var(--fluid-max-negative);\n    --fluid-min-size--1: (var(--fluid-min-size) * var(--fluid-min-scale--1)) / 16;\n    --fluid-max-size--1: (var(--fluid-max-size) * var(--fluid-max-scale--1)) / 16;\n    --fluid-min-scale-0: var(--fluid-min-ratio);\n    --fluid-max-scale-0: var(--fluid-max-ratio);\n    --fluid-min-size-0: (var(--fluid-min-size)) / 16;\n    --fluid-max-size-0: (var(--fluid-max-size)) / 16;\n    --fluid-min-scale-1: var(--fluid-min-scale-0) * var(--fluid-min-ratio);\n    --fluid-max-scale-1: var(--fluid-max-scale-0) * var(--fluid-max-ratio);\n    --fluid-min-size-1: (var(--fluid-min-size) * var(--fluid-min-scale-0)) / 16;\n    --fluid-max-size-1: (var(--fluid-max-size) * var(--fluid-max-scale-0)) / 16;\n    --fluid-min-scale-2: var(--fluid-min-scale-1) * var(--fluid-min-ratio);\n    --fluid-max-scale-2: var(--fluid-max-scale-1) * var(--fluid-max-ratio);\n    --fluid-min-size-2: (var(--fluid-min-size) * var(--fluid-min-scale-1)) / 16;\n    --fluid-max-size-2: (var(--fluid-max-size) * var(--fluid-max-scale-1)) / 16;\n    --fluid-min-scale-3: var(--fluid-min-scale-2) * var(--fluid-min-ratio);\n    --fluid-max-scale-3: var(--fluid-max-scale-2) * var(--fluid-max-ratio);\n    --fluid-min-size-3: (var(--fluid-min-size) * var(--fluid-min-scale-2)) / 16;\n    --fluid-max-size-3: (var(--fluid-max-size) * var(--fluid-max-scale-2)) / 16;\n    --fluid-min-scale-4: var(--fluid-min-scale-3) * var(--fluid-min-ratio);\n    --fluid-max-scale-4: var(--fluid-max-scale-3) * var(--fluid-max-ratio);\n    --fluid-min-size-4: (var(--fluid-min-size) * var(--fluid-min-scale-3)) / 16;\n    --fluid-max-size-4: (var(--fluid-max-size) * var(--fluid-max-scale-3)) / 16;\n    --fluid-min-scale-5: var(--fluid-min-scale-4) * var(--fluid-min-ratio);\n    --fluid-max-scale-5: var(--fluid-max-scale-4) * var(--fluid-max-ratio);\n    --fluid-min-size-5: (var(--fluid-min-size) * var(--fluid-min-scale-4)) / 16;\n    --fluid-max-size-5: (var(--fluid-max-size) * var(--fluid-max-scale-4)) / 16;\n\n    // Colour Properties\n    // each item in color map\n    @each $name, $colour in $colours {\n        --#{$name}: #{$colour};\n    }\n\n    // Typography Properties\n    // # Font Sizes\n    // ## Create matchng utilities for these in: typography/_font-style.scss\n    --fs-sm: calc(((var(--fluid-min-size--1) * 1rem) + (var(--fluid-max-size--1) - var(--fluid-min-size--1)) * var(--fluid-bp)));\n    --fs-base: calc(((var(--fluid-min-size-0) * 1rem) + (var(--fluid-max-size-0) - var(--fluid-min-size-0)) * var(--fluid-bp)));\n    --fs-md: calc(((var(--fluid-min-size-1) * 1rem) + (var(--fluid-max-size-1) - var(--fluid-min-size-1)) * var(--fluid-bp)));\n    --fs-lg: calc(((var(--fluid-min-size-2) * 1rem) + (var(--fluid-max-size-2) - var(--fluid-min-size-2)) * var(--fluid-bp)));\n    --fs-xl: calc(((var(--fluid-min-size-3) * 1rem) + (var(--fluid-max-size-3) - var(--fluid-min-size-3)) * var(--fluid-bp)));\n    --fs-2xl: calc(((var(--fluid-min-size-4) * 1rem) + (var(--fluid-max-size-4) - var(--fluid-min-size-4)) * var(--fluid-bp)));\n    --fs-3xl: calc(((var(--fluid-min-size-5) * 1rem) + (var(--fluid-max-size-5) - var(--fluid-min-size-5)) * var(--fluid-bp)));\n    // # Font Weights\n    // ## Create matchng utilities for these in: typography/_font-weight.scss\n    --fw-light: 200;\n    --fw-normal: 400;\n    --fw-bold: 600;\n    // # Font Families\n    // ## Create matchng utilities for these in: typography/_font-family.scss\n    --ff-sans: Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif;\n    --ff-serif: Georgia, Cambria, \"Times New Roman\", Times, serif;\n    // # Letter Spacing / Tracking\n    // ## Create matchng utilities for these in: typography/_letter-spacing.scss\n    --ls--3: -0.1em;\n    --ls--2: -0.05em;\n    --ls--1: -0.025em;\n    --ls-0: 0;\n    --ls-1: 0.025em;\n    --ls-2: 0.05em;\n    --ls-3: 0.1em;\n    // # Line Height / Leading\n    // ## Create matchng utilities for these in: typography/_line-height.scss\n    --lh-none: 1;\n    --lh-tight: 1.25;\n    --lh-snug: 1.375;\n    --lh-normal: 1.5;\n    --lh-relaxed: 1.625;\n    --lh-loose: 2;\n}\n","// fn for easily creating css vars\n// # https://dev.to/meduzen/write-css-variables-faster-in-scss-1mon\n@function v($var, $fallback: null) {\n    @if($fallback) {\n        @return var(--#{$var}, #{$fallback});\n    } @else {\n        @return var(--#{$var});\n    }\n}\n\n// fn for creating media Queries\n// # https://www.sitepoint.com/using-sass-maps/\n@mixin mq($breakpoint) {\n  @if map-has-key($breakpoints, $breakpoint) {\n    @media (min-width: #{map-get($breakpoints, $breakpoint)}) {\n      @content;\n    }\n  }\n\n  @else {\n    @warn \"Unfortunately, no value could be retrieved from `#{$breakpoint}`. \"\n        + \"Please make sure it is defined in `$breakpoints` map.\";\n  }\n}","// Set class name.\n$className: 'text';\n\n// Set variants available for this class.\n// # You can use 'responsive' as well as 'hover', 'focus', 'active' etc...\n$variants: 'responsive'; // We don't need responsive as the font sizes are responsive by default.\n\n// Construct class props so we don't keep repeating ourselves.\n@mixin text-align($prefix, $suffix) {\n\n    // Utilities for controlling the alignment of text.\n    // # Control the text alignment of an element using the 'text--left', 'text--center', 'text--right', and 'text--justify' utilities.\n    // # These must match the vars set out in '_css-vars.scss'\n    .#{$prefix}--left#{$suffix} {\n        text-align: left;\n    }\n\n    .#{$prefix}--center#{$suffix} {\n        text-align: center;\n    }\n\n    .#{$prefix}--right#{$suffix} {\n        text-align: right;\n    }\n\n    .#{$prefix}--justify#{$suffix} {\n        text-align: justify;\n    }\n}\n\n// Use mixin as a default class without media queries.\n@include text-align($className, \"\");\n\n// Check if 'none' is in list.\n@if not index($variants, 'none') {\n    // # If none isn't in the list, Loop through the selected variants for this class.\n    @each $variant in $variants {\n\n        // # Make sure we don't include the 'responsive' the variant.\n        @if $variant != 'responsive' {\n            // # Include variant classes\n            @include text-align(\"#{$variant}\\\\:#{$className}\", \":#{$variant}\");\n        }\n    }\n}\n\n// Use mixin inside media queries with relevant prefix.\n// # Check if 'responsive' is in list.\n@if index($variants, 'responsive') {\n\n    // If responsive is in list then loop through breakpoints.\n    @each $query_name, $breakpoint in $breakpoints {\n\n        // Initiate Media Query.\n        @media (min-width: $breakpoint) {\n\n            // Create default class with breakpoint prefix.\n            @include text-align(\"#{$query_name}\\\\:#{$className}\", \"\");\n\n            // Loop through the selected variants for this class.\n            @each $variant in $variants {\n\n                // Make sure we don't include the 'responsive' the variant.\n                @if $variant != 'responsive' {\n\n                    // Include variant classes inside mq\n                    @include text-align(\"#{$query_name}\\\\:#{$variant}\\\\:#{$className}\", \":#{$variant}\");\n                }\n            }\n        }\n    }\n}\n"]}