{"version":3,"sources":["_css-vars.scss","_functions.scss","_class-constructor.scss"],"names":[],"mappings":"AAAA;ECmCgB,sBAAwB;EAAxB,uBAAwB;EAAxB,oBAAwB;EAAxB,oBAAwB;EAAxB,wBAAwB;EAAxB,sBAAwB;ED/BpC,qBAAe;EACf,kJAAW,EAAA;;ACSX;EDLA;IACI,kDAAe,EAAA,EAClB;;AAGL;EAEI,2EAAqB;EACrB,2EAAqB;EACrB,wEAAqB;EACrB,wEAAqB;EACrB,6EAAoB;EACpB,6EAAoB;EACpB,2CAAoB;EACpB,2CAAoB;EACpB,gDAAmB;EACnB,gDAAmB;EACnB,sEAAoB;EACpB,sEAAoB;EACpB,2EAAmB;EACnB,2EAAmB;EACnB,sEAAoB;EACpB,sEAAoB;EACpB,2EAAmB;EACnB,2EAAmB;EACnB,sEAAoB;EACpB,sEAAoB;EACpB,2EAAmB;EACnB,2EAAmB;EACnB,sEAAoB;EACpB,sEAAoB;EACpB,2EAAmB;EACnB,2EAAmB;EACnB,sEAAoB;EACpB,sEAAoB;EACpB,2EAAmB;EACnB,2EAAmB;ECVP,mEAAwB;EAAxB,6DAAwB;EAAxB,4HAAwB;EAAxB,2HAAwB;EAAxB,yHAAwB;EAAxB,yHAAwB;EAAxB,yHAAwB;EAAxB,0HAAwB;EAAxB,0HAAwB;EAAxB,eAAwB;EAAxB,gBAAwB;EAAxB,cAAwB;EAAxB,2BAAwB;EAAxB,2BAAwB;EAAxB,0BAAwB;EAAxB,oBAAwB;EAAxB,wBAAwB;EAAxB,wBAAwB;EAAxB,iBAAwB;EAAxB,qBAAwB;EAAxB,qBAAwB;EAAxB,qBAAwB;EAAxB,wBAAwB;EAAxB,kBAAwB;EAAxB,gBAAwB;EAAxB,gBAAwB;EAAxB,oBAAwB;EAAxB,mBAAwB;EAAxB,qBAAwB;EAAxB,kBAAwB,EAAA;;ACPpB;EACI,kIAAoB;EAApB,2HAAoB,EAAA;;AAVxB;EACI,sNDdQ;ECcR,uBDdQ,EAAA;;ACaZ;EACI,kIDdQ;ECcR,yBDdQ,EAAA;;ACaZ;EACI,wJDdQ;ECcR,uBDdQ,EAAA;;ACaZ;EACI,8KDdQ;ECcR,uBDdQ,EAAA;;ACaZ;EACI,oMDdQ;ECcR,uBDdQ,EAAA;;ACaZ;EACI,0NDdQ;ECcR,wBDdQ,EAAA;;ACaZ;EACI,gPDdQ;ECcR,wBDdQ,EAAA","file":"base.css","sourcesContent":[":root {\n    // Typography - Fluid Text Defaults\n    @include css-var-constructor( $fluid_typography );\n\n    --fluid-screen: 100vw;\n    --fluid-bp: calc((var(--fluid-screen) - ((var(--fluid-min-width) / 16) * 1rem)) / ((var(--fluid-max-width) / 16) - (var(--fluid-min-width) / 16)));\n}\n\n@include mq(xl) {\n    :root {\n        --fluid-screen: calc(var(--fluid-max-width) * 1px);\n    }\n}\n\n:root {\n    // Fluid Text Helpers\n    --fluid-max-negative: (1 / var(--fluid-max-ratio) / var(--fluid-max-ratio));\n    --fluid-min-negative: (1 / var(--fluid-min-ratio) / var(--fluid-min-ratio));\n    --fluid-min-scale--1: var(--fluid-min-ratio) * var(--fluid-min-negative);\n    --fluid-max-scale--1: var(--fluid-max-ratio) * var(--fluid-max-negative);\n    --fluid-min-size--1: (var(--fluid-min-size) * var(--fluid-min-scale--1)) / 16;\n    --fluid-max-size--1: (var(--fluid-max-size) * var(--fluid-max-scale--1)) / 16;\n    --fluid-min-scale-0: var(--fluid-min-ratio);\n    --fluid-max-scale-0: var(--fluid-max-ratio);\n    --fluid-min-size-0: (var(--fluid-min-size)) / 16;\n    --fluid-max-size-0: (var(--fluid-max-size)) / 16;\n    --fluid-min-scale-1: var(--fluid-min-scale-0) * var(--fluid-min-ratio);\n    --fluid-max-scale-1: var(--fluid-max-scale-0) * var(--fluid-max-ratio);\n    --fluid-min-size-1: (var(--fluid-min-size) * var(--fluid-min-scale-0)) / 16;\n    --fluid-max-size-1: (var(--fluid-max-size) * var(--fluid-max-scale-0)) / 16;\n    --fluid-min-scale-2: var(--fluid-min-scale-1) * var(--fluid-min-ratio);\n    --fluid-max-scale-2: var(--fluid-max-scale-1) * var(--fluid-max-ratio);\n    --fluid-min-size-2: (var(--fluid-min-size) * var(--fluid-min-scale-1)) / 16;\n    --fluid-max-size-2: (var(--fluid-max-size) * var(--fluid-max-scale-1)) / 16;\n    --fluid-min-scale-3: var(--fluid-min-scale-2) * var(--fluid-min-ratio);\n    --fluid-max-scale-3: var(--fluid-max-scale-2) * var(--fluid-max-ratio);\n    --fluid-min-size-3: (var(--fluid-min-size) * var(--fluid-min-scale-2)) / 16;\n    --fluid-max-size-3: (var(--fluid-max-size) * var(--fluid-max-scale-2)) / 16;\n    --fluid-min-scale-4: var(--fluid-min-scale-3) * var(--fluid-min-ratio);\n    --fluid-max-scale-4: var(--fluid-max-scale-3) * var(--fluid-max-ratio);\n    --fluid-min-size-4: (var(--fluid-min-size) * var(--fluid-min-scale-3)) / 16;\n    --fluid-max-size-4: (var(--fluid-max-size) * var(--fluid-max-scale-3)) / 16;\n    --fluid-min-scale-5: var(--fluid-min-scale-4) * var(--fluid-min-ratio);\n    --fluid-max-scale-5: var(--fluid-max-scale-4) * var(--fluid-max-ratio);\n    --fluid-min-size-5: (var(--fluid-min-size) * var(--fluid-min-scale-4)) / 16;\n    --fluid-max-size-5: (var(--fluid-max-size) * var(--fluid-max-scale-4)) / 16;\n\n    // Typography - Font Family\n    // # Generates matching Utility Classes in: typography/_font-family.scss\n    @include css-var-constructor( $font_families );\n\n    // Typography - Font Size\n    // # Generates matching Utility Classes in: typography/_font-size.scss\n    @include css-var-constructor( $font_sizes );\n\n    // Typography - Font Weights\n    // # Generates matching Utility Classes in: typography/_font-weight.scss\n    @include css-var-constructor( $font_weights );\n\n    // Typography - Tracking / Letter Spacings\n    // # Generates matching Utility Classes in: typography/_letter-spacing.scss\n    @include css-var-constructor( $letter_spacings );\n\n    // Typography - Leading / Line Height\n    // # Generates matching Utility Classes in: typography/_line-height.scss\n    @include css-var-constructor( $line_heights );\n\n    // Generate Color Properties\n    // # Create matchng utilities for these in: typography/_text-colour.scss\n    @include css-var-constructor( $colours );\n}\n","// fn for easily creating css vars\n// # https://dev.to/meduzen/write-css-variables-faster-in-scss-1mon\n@function v($var, $fallback: null) {\n    @if($fallback) {\n        @return var(--#{$var}, #{$fallback});\n    } @else {\n        @return var(--#{$var});\n    }\n}\n\n// fn for creating media Queries\n// # https://www.sitepoint.com/using-sass-maps/\n@mixin mq($breakpoint) {\n  @if map-has-key($breakpoints, $breakpoint) {\n    @media (min-width: #{map-get($breakpoints, $breakpoint)}) {\n      @content;\n    }\n  }\n\n  @else {\n    @warn \"Unfortunately, no value could be retrieved from `#{$breakpoint}`. \"\n        + \"Please make sure it is defined in `$breakpoints` map.\";\n  }\n}\n\n// CSS Custom Var/Prop Constructor\n// # Used in: _css-vars.scss\n@mixin css-var-constructor( $map ) {\n    // ## Check if $map has been specified\n    @if $map != null {\n        // ### If is specified, loop through each item in the map.\n        @each $name, $details in $map {\n            // #### Check whether item should output a var.\n            @if nth( $details, 2 ) == true {\n                // #### Output var\n                --#{nth($details, 3)}: #{nth($details, 1)};\n            }\n        }\n    }\n}","// Utility Class constructor\n// # Let's create the properties once so we don't keep repeating ourselves.\n@mixin constructor( $prefix, $suffix ) {\n\n    // ### Check if $map has been specified\n    @if $class_map != null {\n\n        // #### If $map is specified, loop through each item in map.\n        @each $name, $properties in $class_map {\n\n            // ##### Check if item should output a CSS Var.\n            @if nth( $properties, 2 ) == true {\n\n                @if $name == 'default' {\n                    .#{$prefix}#{$suffix} {\n                        #{$class_property}: v(#{nth($properties, 3)});\n                    }\n                } @else {\n                    // ###### Construct Class with Properties from map.\n                    .#{$prefix}--#{$name}#{$suffix} {\n                        #{$class_property}: v(#{nth($properties, 3)});\n                    }\n                }\n\n            } @else {\n\n                @if $name == 'default' {\n                    // ###### Construct Class with Properties from map.\n                    .#{$prefix}#{$suffix} {\n                        #{$class_property}: #{nth($properties, 1)};\n                    }\n                } @else {\n                    // ###### Construct Class with Properties from map.\n                    .#{$prefix}--#{$name}#{$suffix} {\n                        #{$class_property}: #{nth($properties, 1)};\n                    }\n                }\n\n\n            }\n        }\n    }\n}\n\n// # Let's put it altogether\n@mixin class-constructor( $class_name, $class_variants, $class_property, $class_map ){\n\n    // ## Use constructor to build your default classes without media queries & variants.\n    @include constructor($class_name, \"\");\n\n    // ## Check if our $variants list includes 'none'.\n    @if not index($class_variants, 'none') {\n\n        // ### If 'none' isn't present we'll loop through the selected variants for this class.\n        @each $variant in $class_variants {\n\n            // #### We want to make sure we don't use the 'responsive' variant at this point if it exists.\n            @if $variant != 'responsive' {\n\n                // ##### Use constructor to build our variant classes without media queries.\n                @include constructor(\"#{$variant}\\\\:#{$class_name}\", \":#{$variant}\");\n            }\n        }\n    }\n\n    // ## Check if our $variants list includes 'responsive'.\n    @if index($class_variants, 'responsive') {\n\n        // ### If 'responsive' is present we'll loop through the brakpoints set in _scss-vars.scss.\n        @each $bp_name, $breakpoint in $breakpoints {\n\n            // #### Construct each media query when we loop through it.\n            @media (min-width: $breakpoint) {\n\n                // ##### Use constructor to build our default classes with breakpoint prefix.\n                @include constructor(\"#{$bp_name}\\\\:#{$class_name}\", \"\");\n\n                // ##### We'll loop through the selected variants for this class.\n                @each $variant in $class_variants {\n\n                    // ###### We want to make sure we don't use the 'responsive' variant at this pointas we've already used it.\n                    @if $variant != 'responsive' {\n\n                        // ####### Use constructor to build our variant classes with breakpoint prefix.\n                        @include constructor(\"#{$bp_name}\\\\:#{$variant}\\\\:#{$class_name}\", \":#{$variant}\");\n                    }\n                }\n            }\n        }\n    }\n}\n"]}