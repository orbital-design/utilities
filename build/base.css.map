{"version":3,"sources":["_css-vars.scss","_functions.scss","typography/_font-size.scss"],"names":[],"mappings":"AAAA;ECmCgB,sBAAwB;EAAxB,uBAAwB;EAAxB,oBAAwB;EAAxB,oBAAwB;EAAxB,wBAAwB;EAAxB,sBAAwB;EDhCpC,qBAAe;EACf,kJAAW,EAAA;;ACUX;EDNA;IACI,kDAAe,EAAA,EAClB;;AAGL;EAEI,2EAAqB;EACrB,2EAAqB;EACrB,wEAAqB;EACrB,wEAAqB;EACrB,6EAAoB;EACpB,6EAAoB;EACpB,2CAAoB;EACpB,2CAAoB;EACpB,gDAAmB;EACnB,gDAAmB;EACnB,sEAAoB;EACpB,sEAAoB;EACpB,2EAAmB;EACnB,2EAAmB;EACnB,sEAAoB;EACpB,sEAAoB;EACpB,2EAAmB;EACnB,2EAAmB;EACnB,sEAAoB;EACpB,sEAAoB;EACpB,2EAAmB;EACnB,2EAAmB;EACnB,sEAAoB;EACpB,sEAAoB;EACpB,2EAAmB;EACnB,2EAAmB;EACnB,sEAAoB;EACpB,sEAAoB;EACpB,2EAAmB;EACnB,2EAAmB;ECTP,mEAAwB;EAAxB,6DAAwB;EAAxB,4HAAwB;EAAxB,2HAAwB;EAAxB,yHAAwB;EAAxB,yHAAwB;EAAxB,yHAAwB;EAAxB,0HAAwB;EAAxB,0HAAwB;EAAxB,eAAwB;EAAxB,gBAAwB;EAAxB,cAAwB;EAAxB,2BAAwB;EAAxB,2BAAwB;EAAxB,0BAAwB;EAAxB,oBAAwB;EAAxB,wBAAwB;EAAxB,wBAAwB;EAAxB,iBAAwB;EAAxB,qBAAwB;EAAxB,qBAAwB;EAAxB,qBAAwB;EAAxB,wBAAwB;EAAxB,kBAAwB;EAAxB,gBAAwB;EAAxB,gBAAwB;EAAxB,oBAAwB;EAAxB,mBAAwB;EAAxB,qBAAwB;EAAxB,kBAAwB,EAAA;;ACvBpC;EACI,kIDPwB;ECOxB,yBDPwB,EAAA;;ACY5B;EACI,sNDbwB;ECaxB,uBDbwB,EAAA;;ACgB5B;EACI,kIDjBwB;ECiBxB,yBDjBwB,EAAA;;ACoB5B;EACI,wJDrBwB;ECqBxB,uBDrBwB,EAAA;;ACwB5B;EACI,8KDzBwB;ECyBxB,uBDzBwB,EAAA;;AC4B5B;EACI,oMD7BwB;EC6BxB,uBD7BwB,EAAA;;ACgC5B;EACI,0NDjCwB;ECiCxB,wBDjCwB,EAAA;;ACoC5B;EACI,gPDrCwB;ECqCxB,wBDrCwB,EAAA","file":"base.css","sourcesContent":[":root {\n    // Typography - Fluid Text Defaults\n    @include css-var-constructor( $fluid_typography );\n    --fluid-screen: 100vw;\n    --fluid-bp: calc((var(--fluid-screen) - ((var(--fluid-min-width) / 16) * 1rem)) / ((var(--fluid-max-width) / 16) - (var(--fluid-min-width) / 16)));\n}\n\n@include mq(xl) {\n    :root {\n        --fluid-screen: calc(var(--fluid-max-width) * 1px);\n    }\n}\n\n:root {\n    // Fluid Text Helpers\n    --fluid-max-negative: (1 / var(--fluid-max-ratio) / var(--fluid-max-ratio));\n    --fluid-min-negative: (1 / var(--fluid-min-ratio) / var(--fluid-min-ratio));\n    --fluid-min-scale--1: var(--fluid-min-ratio) * var(--fluid-min-negative);\n    --fluid-max-scale--1: var(--fluid-max-ratio) * var(--fluid-max-negative);\n    --fluid-min-size--1: (var(--fluid-min-size) * var(--fluid-min-scale--1)) / 16;\n    --fluid-max-size--1: (var(--fluid-max-size) * var(--fluid-max-scale--1)) / 16;\n    --fluid-min-scale-0: var(--fluid-min-ratio);\n    --fluid-max-scale-0: var(--fluid-max-ratio);\n    --fluid-min-size-0: (var(--fluid-min-size)) / 16;\n    --fluid-max-size-0: (var(--fluid-max-size)) / 16;\n    --fluid-min-scale-1: var(--fluid-min-scale-0) * var(--fluid-min-ratio);\n    --fluid-max-scale-1: var(--fluid-max-scale-0) * var(--fluid-max-ratio);\n    --fluid-min-size-1: (var(--fluid-min-size) * var(--fluid-min-scale-0)) / 16;\n    --fluid-max-size-1: (var(--fluid-max-size) * var(--fluid-max-scale-0)) / 16;\n    --fluid-min-scale-2: var(--fluid-min-scale-1) * var(--fluid-min-ratio);\n    --fluid-max-scale-2: var(--fluid-max-scale-1) * var(--fluid-max-ratio);\n    --fluid-min-size-2: (var(--fluid-min-size) * var(--fluid-min-scale-1)) / 16;\n    --fluid-max-size-2: (var(--fluid-max-size) * var(--fluid-max-scale-1)) / 16;\n    --fluid-min-scale-3: var(--fluid-min-scale-2) * var(--fluid-min-ratio);\n    --fluid-max-scale-3: var(--fluid-max-scale-2) * var(--fluid-max-ratio);\n    --fluid-min-size-3: (var(--fluid-min-size) * var(--fluid-min-scale-2)) / 16;\n    --fluid-max-size-3: (var(--fluid-max-size) * var(--fluid-max-scale-2)) / 16;\n    --fluid-min-scale-4: var(--fluid-min-scale-3) * var(--fluid-min-ratio);\n    --fluid-max-scale-4: var(--fluid-max-scale-3) * var(--fluid-max-ratio);\n    --fluid-min-size-4: (var(--fluid-min-size) * var(--fluid-min-scale-3)) / 16;\n    --fluid-max-size-4: (var(--fluid-max-size) * var(--fluid-max-scale-3)) / 16;\n    --fluid-min-scale-5: var(--fluid-min-scale-4) * var(--fluid-min-ratio);\n    --fluid-max-scale-5: var(--fluid-max-scale-4) * var(--fluid-max-ratio);\n    --fluid-min-size-5: (var(--fluid-min-size) * var(--fluid-min-scale-4)) / 16;\n    --fluid-max-size-5: (var(--fluid-max-size) * var(--fluid-max-scale-4)) / 16;\n\n    // Typography - Font Family\n    // # Generates matching Utility Classes in: typography/_font-family.scss\n    @include css-var-constructor( $font_families );\n\n    // Typography - Font Size\n    // # Generates matching Utility Classes in: typography/_font-size.scss\n    @include css-var-constructor( $font_sizes );\n\n    // Typography - Font Weights\n    // # Generates matching Utility Classes in: typography/_font-weight.scss\n    @include css-var-constructor( $font_weights );\n\n    // Typography - Tracking / Letter Spacings\n    // # Generates matching Utility Classes in: typography/_letter-spacing.scss\n    @include css-var-constructor( $letter_spacings );\n\n    // Typography - Leading / Line Height\n    // # Generates matching Utility Classes in: typography/_line-height.scss\n    @include css-var-constructor( $line_heights );\n\n    // Generate Color Properties\n    // # Create matchng utilities for these in: typography/_text-colour.scss\n    @include css-var-constructor( $colours );\n}\n","// fn for easily creating css vars\n// # https://dev.to/meduzen/write-css-variables-faster-in-scss-1mon\n@function v($var, $fallback: null) {\n    @if($fallback) {\n        @return var(--#{$var}, #{$fallback});\n    } @else {\n        @return var(--#{$var});\n    }\n}\n\n// fn for creating media Queries\n// # https://www.sitepoint.com/using-sass-maps/\n@mixin mq($breakpoint) {\n  @if map-has-key($breakpoints, $breakpoint) {\n    @media (min-width: #{map-get($breakpoints, $breakpoint)}) {\n      @content;\n    }\n  }\n\n  @else {\n    @warn \"Unfortunately, no value could be retrieved from `#{$breakpoint}`. \"\n        + \"Please make sure it is defined in `$breakpoints` map.\";\n  }\n}\n\n// CSS Custom Var/Prop Constructor\n// # Used in: _css-vars.scss\n@mixin css-var-constructor( $map ) {\n    // ## Check if $map has been specified\n    @if $map != null {\n        // ### If is specified, loop through each item in the map.\n        @each $name, $details in $map {\n            // #### Check whether item should output a var.\n            @if nth( $details, 2 ) == true {\n                // #### Output var\n                --#{nth($details, 3)}: #{nth($details, 1)};\n            }\n        }\n    }\n}","// TODO: Adapt constructor for this.\n// Set class name.\n$className: 'font-size';\n\n// Set variants available for this class.\n// # You can use 'responsive' as well as 'hover', 'focus', 'active' etc...\n$variants: 'none'; // We don't need responsive as the font sizes are responsive by default.\n\n// Construct class props so we don't keep repeating ourselves.\n@mixin font-size($prefix, $suffix) {\n\n    // Utilities for controlling the font size of an element.\n    .#{$prefix}#{$suffix} {\n        font-size: v(fs-base);\n    }\n\n    // Control the font size of an element using the 'font-size--{size}' utilities.\n    // These must match the vars set out in '_css-vars.scss'\n    .#{$prefix}--sm#{$suffix} {\n        font-size: v(fs-sm);\n    }\n\n    .#{$prefix}--base#{$suffix} {\n        font-size: v(fs-base);\n    }\n\n    .#{$prefix}--md#{$suffix} {\n        font-size: v(fs-md);\n    }\n\n    .#{$prefix}--lg#{$suffix} {\n        font-size: v(fs-lg);\n    }\n\n    .#{$prefix}--xl#{$suffix} {\n        font-size: v(fs-xl);\n    }\n\n    .#{$prefix}--2xl#{$suffix} {\n        font-size: v(fs-2xl);\n    }\n\n    .#{$prefix}--3xl#{$suffix} {\n        font-size: v(fs-3xl);\n    }\n}\n\n// Use mixin as a default class without media queries.\n@include font-size($className, \"\");\n\n// Check if 'none' is in list.\n@if not index($variants, 'none') {\n    // # If none isn't in the list, Loop through the selected variants for this class.\n    @each $variant in $variants {\n\n        // # Make sure we don't include the 'responsive' the variant.\n        @if $variant != 'responsive' {\n            // # Include variant classes\n            @include font-size(\"#{$variant}\\\\:#{$className}\", \":#{$variant}\");\n        }\n    }\n}\n\n// Use mixin inside media queries with relevant prefix.\n// # Check if 'responsive' is in list.\n@if index($variants, 'responsive') {\n\n    // If responsive is in list then loop through breakpoints.\n    @each $query_name, $breakpoint in $breakpoints {\n\n        // Initiate Media Query.\n        @media (min-width: $breakpoint) {\n\n            // Create default class with breakpoint prefix.\n            @include font-size(\"#{$query_name}\\\\:#{$className}\", \"\");\n\n            // Loop through the selected variants for this class.\n            @each $variant in $variants {\n\n                // Make sure we don't include the 'responsive' the variant.\n                @if $variant != 'responsive' {\n\n                    // Include variant classes inside mq\n                    @include font-size(\"#{$query_name}\\\\:#{$variant}\\\\:#{$className}\", \":#{$variant}\");\n                }\n            }\n        }\n    }\n}\n"]}